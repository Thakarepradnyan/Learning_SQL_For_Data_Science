** String Data Types **

1. CHAR(size) => A FIXED length string (can contain letters, numbers, and special characters). The size parameter specifies the column length in characters - can be from 0 to 255. Default is 1
2. VARCHAR(size) => A VARIABLE length string (can contain letters, numbers, and special characters). The size parameter specifies the maximum string length in characters - can be from 0 to 65535
3. BINARY(size) => Equal to CHAR(), but stores binary byte strings. The size parameter specifies the column length in bytes. Default is 1
4. VARBINARY(size) => Equal to VARCHAR(), but stores binary byte strings. The size parameter specifies the maximum column length in bytes.

** Numeric Data Types ** 

1. BIT(size) => A bit-value type. The number of bits per value is specified in size. The size parameter can hold a value from 1 to 64. The default value for size is 1.
2. TINYINT(size) => A very small integer. Signed range is from -128 to 127. Unsigned range is from 0 to 255. The size parameter specifies the maximum display width (which is 255)
3. BOOL => Zero is considered as false, nonzero values are considered as true.
4. SMALLINT(size) => A small integer. Signed range is from -32768 to 32767. Unsigned range is from 0 to 65535. The size parameter specifies the maximum display width (which is 255)
5. MEDIUMINT(size) => A medium integer. Signed range is from -8388608 to 8388607. Unsigned range is from 0 to 16777215. The size parameter specifies the maximum display width (which is 255)
6. INT(size) => A medium integer. Signed range is from -2147483648 to 2147483647. Unsigned range is from 0 to 4294967295. The size parameter specifies the maximum display width (which is 255)
7. BIGINT(size) => A large integer. Signed range is from -9223372036854775808 to 9223372036854775807. Unsigned range is from 0 to 18446744073709551615. The size parameter specifies the maximum display width (which is 255)
8. FLOAT(size, d) => A floating point number. The total number of digits is specified in size. The number of digits after the decimal point is specified in the d parameter. This syntax is deprecated in MySQL 8.0.17, and it will be removed in future MySQL versions
9. DOUBLE(size, d) => 	A normal-size floating point number. The total number of digits is specified in size. The number of digits after the decimal point is specified in the d parameter
10. DECIMAL(size, d) => An exact fixed-point number. The total number of digits is specified in size. The number of digits after the decimal point is specified in the d parameter. The maximum number for size is 65. The maximum number for d is 30. The default value for size is 10. The default value for d is 0.

** Date and Time Data Types ** 

1. DATE => A date. Format: YYYY-MM-DD. The supported range is from '1000-01-01' to '9999-12-31'
2. DATETIME(fsp) => A date and time combination. Format: YYYY-MM-DD hh:mm:ss. The supported range is from '1000-01-01 00:00:00' to '9999-12-31 23:59:59'. Adding DEFAULT and ON UPDATE in the column definition to get automatic initialization and updating to the current date and time
3. TIMESTAMP(fsp) => 	A timestamp. TIMESTAMP values are stored as the number of seconds since the Unix epoch ('1970-01-01 00:00:00' UTC). Format: YYYY-MM-DD hh:mm:ss. The supported range is from '1970-01-01 00:00:01' UTC to '2038-01-09 03:14:07' UTC. Automatic initialization and updating to the current date and time can be specified using DEFAULT CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP in the column definition
4. TIME(fsp) => A time. Format: hh:mm:ss. The supported range is from '-838:59:59' to '838:59:59'
5. YEAR => 	A year in four-digit format. Values allowed in four-digit format: 1901 to 2155, and 0000.
